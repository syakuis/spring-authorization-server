buildscript {
    ext {
        groupId = "io.github.syaku"
        versionName = "1.0.0-SNAPSHOT"

        springBootVersion = "2.7.3"
        springCloudVersion = "2021.0.3"
        jacksonVersion = '2.13.3'
        lombokVersion = '1.18.24'

        h2Version = "1.4.200"

        springAuthorizationServerVersion = '1.0.0'
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1"
    }
}

wrapper {
    gradleVersion = "7.5.1"
}

apply plugin: "java-library"
apply plugin: "application"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"
apply plugin: "maven-publish"

repositories {
    maven {
        url "https://repo.spring.io/release"
    }
    mavenCentral()
}

group groupId
version versionName

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

compileJava.options.encoding = 'UTF-8'

configurations {
    implementation.exclude module: "spring-boot-starter-tomcat"
}

processResources {
    filesMatching('*.yml') {
        expand(project.properties)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'
    testImplementation "com.h2database:h2:${h2Version}"
    compileOnly "com.h2database:h2:${h2Version}"

    // spring security authorization server
    implementation "org.springframework.security:spring-security-oauth2-core"
    implementation "org.springframework.security:spring-security-oauth2-authorization-server:${springAuthorizationServerVersion}"

    // test-container
    testImplementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    testImplementation "com.playtika.testcontainers:embedded-redis:2.2.9"

    // Mac M1
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.77.Final:osx-aarch_64'
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*, **/Q*.java"
        property "sonar.java.junit.reportPaths", "${buildDir}/test-results"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/jacoco.exec"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty 'spring.profiles.active', 'test'
}

application {
    mainClass = "io.github.syaku.authorization.AuthorizationServerApplication"
}


bootJar {
    enabled = true
    launchScript()
}

jar {
    enabled false
}
